// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: communication.proto

package comm

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/any"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Communication service

type CommunicationService interface {
	CommEventFunc(ctx context.Context, opts ...client.CallOption) (Communication_CommEventFuncService, error)
}

type communicationService struct {
	c    client.Client
	name string
}

func NewCommunicationService(name string, c client.Client) CommunicationService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "comm"
	}
	return &communicationService{
		c:    c,
		name: name,
	}
}

func (c *communicationService) CommEventFunc(ctx context.Context, opts ...client.CallOption) (Communication_CommEventFuncService, error) {
	req := c.c.NewRequest(c.name, "Communication.CommEventFunc", &CommEvent{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &communicationServiceCommEventFunc{stream}, nil
}

type Communication_CommEventFuncService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*CommEvent) error
	Recv() (*CommEvent, error)
}

type communicationServiceCommEventFunc struct {
	stream client.Stream
}

func (x *communicationServiceCommEventFunc) Close() error {
	return x.stream.Close()
}

func (x *communicationServiceCommEventFunc) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *communicationServiceCommEventFunc) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *communicationServiceCommEventFunc) Send(m *CommEvent) error {
	return x.stream.Send(m)
}

func (x *communicationServiceCommEventFunc) Recv() (*CommEvent, error) {
	m := new(CommEvent)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Communication service

type CommunicationHandler interface {
	CommEventFunc(context.Context, Communication_CommEventFuncStream) error
}

func RegisterCommunicationHandler(s server.Server, hdlr CommunicationHandler, opts ...server.HandlerOption) error {
	type communication interface {
		CommEventFunc(ctx context.Context, stream server.Stream) error
	}
	type Communication struct {
		communication
	}
	h := &communicationHandler{hdlr}
	return s.Handle(s.NewHandler(&Communication{h}, opts...))
}

type communicationHandler struct {
	CommunicationHandler
}

func (h *communicationHandler) CommEventFunc(ctx context.Context, stream server.Stream) error {
	return h.CommunicationHandler.CommEventFunc(ctx, &communicationCommEventFuncStream{stream})
}

type Communication_CommEventFuncStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*CommEvent) error
	Recv() (*CommEvent, error)
}

type communicationCommEventFuncStream struct {
	stream server.Stream
}

func (x *communicationCommEventFuncStream) Close() error {
	return x.stream.Close()
}

func (x *communicationCommEventFuncStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *communicationCommEventFuncStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *communicationCommEventFuncStream) Send(m *CommEvent) error {
	return x.stream.Send(m)
}

func (x *communicationCommEventFuncStream) Recv() (*CommEvent, error) {
	m := new(CommEvent)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
