// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: gameprovide.proto

package aaa

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for MyServer service

type MyServerService interface {
	// 用户上线a
	ConnectA(ctx context.Context, opts ...client.CallOption) (MyServer_ConnectAService, error)
	// 用户上线b
	ConnectB(ctx context.Context, in *ConnectReq, opts ...client.CallOption) (MyServer_ConnectBService, error)
	// 用户上线c
	ConnectC(ctx context.Context, opts ...client.CallOption) (MyServer_ConnectCService, error)
	// 用户断线
	Disconnect(ctx context.Context, in *DisconnectReq, opts ...client.CallOption) (*DisconnectRsp, error)
	// 推送消息
	Message(ctx context.Context, in *MessageReq, opts ...client.CallOption) (*MessageRsp, error)
}

type myServerService struct {
	c    client.Client
	name string
}

func NewMyServerService(name string, c client.Client) MyServerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "rpcTst"
	}
	return &myServerService{
		c:    c,
		name: name,
	}
}

func (c *myServerService) ConnectA(ctx context.Context, opts ...client.CallOption) (MyServer_ConnectAService, error) {
	req := c.c.NewRequest(c.name, "MyServer.ConnectA", &ConnectReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &myServerServiceConnectA{stream}, nil
}

type MyServer_ConnectAService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ConnectReq) error
}

type myServerServiceConnectA struct {
	stream client.Stream
}

func (x *myServerServiceConnectA) Close() error {
	return x.stream.Close()
}

func (x *myServerServiceConnectA) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *myServerServiceConnectA) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *myServerServiceConnectA) Send(m *ConnectReq) error {
	return x.stream.Send(m)
}

func (c *myServerService) ConnectB(ctx context.Context, in *ConnectReq, opts ...client.CallOption) (MyServer_ConnectBService, error) {
	req := c.c.NewRequest(c.name, "MyServer.ConnectB", &ConnectReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &myServerServiceConnectB{stream}, nil
}

type MyServer_ConnectBService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ConnectRsp, error)
}

type myServerServiceConnectB struct {
	stream client.Stream
}

func (x *myServerServiceConnectB) Close() error {
	return x.stream.Close()
}

func (x *myServerServiceConnectB) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *myServerServiceConnectB) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *myServerServiceConnectB) Recv() (*ConnectRsp, error) {
	m := new(ConnectRsp)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *myServerService) ConnectC(ctx context.Context, opts ...client.CallOption) (MyServer_ConnectCService, error) {
	req := c.c.NewRequest(c.name, "MyServer.ConnectC", &ConnectReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &myServerServiceConnectC{stream}, nil
}

type MyServer_ConnectCService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ConnectReq) error
	Recv() (*ConnectRsp, error)
}

type myServerServiceConnectC struct {
	stream client.Stream
}

func (x *myServerServiceConnectC) Close() error {
	return x.stream.Close()
}

func (x *myServerServiceConnectC) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *myServerServiceConnectC) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *myServerServiceConnectC) Send(m *ConnectReq) error {
	return x.stream.Send(m)
}

func (x *myServerServiceConnectC) Recv() (*ConnectRsp, error) {
	m := new(ConnectRsp)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *myServerService) Disconnect(ctx context.Context, in *DisconnectReq, opts ...client.CallOption) (*DisconnectRsp, error) {
	req := c.c.NewRequest(c.name, "MyServer.Disconnect", in)
	out := new(DisconnectRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServerService) Message(ctx context.Context, in *MessageReq, opts ...client.CallOption) (*MessageRsp, error) {
	req := c.c.NewRequest(c.name, "MyServer.Message", in)
	out := new(MessageRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyServer service

type MyServerHandler interface {
	// 用户上线a
	ConnectA(context.Context, MyServer_ConnectAStream) error
	// 用户上线b
	ConnectB(context.Context, *ConnectReq, MyServer_ConnectBStream) error
	// 用户上线c
	ConnectC(context.Context, MyServer_ConnectCStream) error
	// 用户断线
	Disconnect(context.Context, *DisconnectReq, *DisconnectRsp) error
	// 推送消息
	Message(context.Context, *MessageReq, *MessageRsp) error
}

func RegisterMyServerHandler(s server.Server, hdlr MyServerHandler, opts ...server.HandlerOption) error {
	type myServer interface {
		ConnectA(ctx context.Context, stream server.Stream) error
		ConnectB(ctx context.Context, stream server.Stream) error
		ConnectC(ctx context.Context, stream server.Stream) error
		Disconnect(ctx context.Context, in *DisconnectReq, out *DisconnectRsp) error
		Message(ctx context.Context, in *MessageReq, out *MessageRsp) error
	}
	type MyServer struct {
		myServer
	}
	h := &myServerHandler{hdlr}
	return s.Handle(s.NewHandler(&MyServer{h}, opts...))
}

type myServerHandler struct {
	MyServerHandler
}

func (h *myServerHandler) ConnectA(ctx context.Context, stream server.Stream) error {
	return h.MyServerHandler.ConnectA(ctx, &myServerConnectAStream{stream})
}

type MyServer_ConnectAStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ConnectReq, error)
}

type myServerConnectAStream struct {
	stream server.Stream
}

func (x *myServerConnectAStream) Close() error {
	return x.stream.Close()
}

func (x *myServerConnectAStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *myServerConnectAStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *myServerConnectAStream) Recv() (*ConnectReq, error) {
	m := new(ConnectReq)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *myServerHandler) ConnectB(ctx context.Context, stream server.Stream) error {
	m := new(ConnectReq)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.MyServerHandler.ConnectB(ctx, m, &myServerConnectBStream{stream})
}

type MyServer_ConnectBStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ConnectRsp) error
}

type myServerConnectBStream struct {
	stream server.Stream
}

func (x *myServerConnectBStream) Close() error {
	return x.stream.Close()
}

func (x *myServerConnectBStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *myServerConnectBStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *myServerConnectBStream) Send(m *ConnectRsp) error {
	return x.stream.Send(m)
}

func (h *myServerHandler) ConnectC(ctx context.Context, stream server.Stream) error {
	return h.MyServerHandler.ConnectC(ctx, &myServerConnectCStream{stream})
}

type MyServer_ConnectCStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ConnectRsp) error
	Recv() (*ConnectReq, error)
}

type myServerConnectCStream struct {
	stream server.Stream
}

func (x *myServerConnectCStream) Close() error {
	return x.stream.Close()
}

func (x *myServerConnectCStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *myServerConnectCStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *myServerConnectCStream) Send(m *ConnectRsp) error {
	return x.stream.Send(m)
}

func (x *myServerConnectCStream) Recv() (*ConnectReq, error) {
	m := new(ConnectReq)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *myServerHandler) Disconnect(ctx context.Context, in *DisconnectReq, out *DisconnectRsp) error {
	return h.MyServerHandler.Disconnect(ctx, in, out)
}

func (h *myServerHandler) Message(ctx context.Context, in *MessageReq, out *MessageRsp) error {
	return h.MyServerHandler.Message(ctx, in, out)
}
