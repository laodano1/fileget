// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: gameprovide.proto

package gameprovide

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Websocket service

type WebsocketService interface {
	// 用户上线
	Connect(ctx context.Context, in *ConnectReq, opts ...client.CallOption) (*ConnectRsp, error)
	// 用户断线
	Disconnect(ctx context.Context, in *DisconnectReq, opts ...client.CallOption) (*DisconnectRsp, error)
	// 推送消息
	Message(ctx context.Context, in *MessageReq, opts ...client.CallOption) (*MessageRsp, error)
}

type websocketService struct {
	c    client.Client
	name string
}

func NewWebsocketService(name string, c client.Client) WebsocketService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "gameprovide"
	}
	return &websocketService{
		c:    c,
		name: name,
	}
}

func (c *websocketService) Connect(ctx context.Context, in *ConnectReq, opts ...client.CallOption) (*ConnectRsp, error) {
	req := c.c.NewRequest(c.name, "Websocket.Connect", in)
	out := new(ConnectRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketService) Disconnect(ctx context.Context, in *DisconnectReq, opts ...client.CallOption) (*DisconnectRsp, error) {
	req := c.c.NewRequest(c.name, "Websocket.Disconnect", in)
	out := new(DisconnectRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketService) Message(ctx context.Context, in *MessageReq, opts ...client.CallOption) (*MessageRsp, error) {
	req := c.c.NewRequest(c.name, "Websocket.Message", in)
	out := new(MessageRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Websocket service

type WebsocketHandler interface {
	// 用户上线
	Connect(context.Context, *ConnectReq, *ConnectRsp) error
	// 用户断线
	Disconnect(context.Context, *DisconnectReq, *DisconnectRsp) error
	// 推送消息
	Message(context.Context, *MessageReq, *MessageRsp) error
}

func RegisterWebsocketHandler(s server.Server, hdlr WebsocketHandler, opts ...server.HandlerOption) error {
	type websocket interface {
		Connect(ctx context.Context, in *ConnectReq, out *ConnectRsp) error
		Disconnect(ctx context.Context, in *DisconnectReq, out *DisconnectRsp) error
		Message(ctx context.Context, in *MessageReq, out *MessageRsp) error
	}
	type Websocket struct {
		websocket
	}
	h := &websocketHandler{hdlr}
	return s.Handle(s.NewHandler(&Websocket{h}, opts...))
}

type websocketHandler struct {
	WebsocketHandler
}

func (h *websocketHandler) Connect(ctx context.Context, in *ConnectReq, out *ConnectRsp) error {
	return h.WebsocketHandler.Connect(ctx, in, out)
}

func (h *websocketHandler) Disconnect(ctx context.Context, in *DisconnectReq, out *DisconnectRsp) error {
	return h.WebsocketHandler.Disconnect(ctx, in, out)
}

func (h *websocketHandler) Message(ctx context.Context, in *MessageReq, out *MessageRsp) error {
	return h.WebsocketHandler.Message(ctx, in, out)
}
